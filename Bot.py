import telebot
from telebot import types

# –ó–∞–º–µ–Ω–∏—Ç–µ 'YOUR_BOT_TOKEN' –Ω–∞ —Ç–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
bot_token = '8181858011:AAFtFMwUVPKWkVWyAz4vf-aN-SWVXRDMpAo'
bot = telebot.TeleBot(bot_token)

# URL –¥–∞—à–±–æ—Ä–¥–∞
DASHBOARD_URL = 'http://127.0.0.1:8050/'

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á
tasks = {}
task_id_counter = 1  # –°—á–µ—Ç—á–∏–∫ –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö ID –∑–∞–¥–∞—á
manager_chat_id = None  # ID –º–µ–Ω–µ–¥–∂–µ—Ä–∞, –∫—É–¥–∞ –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –æ—Ç—á–µ—Ç—ã
executors = {}  # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π –∏ –∏—Ö chat_id


@bot.message_handler(commands=['start'])
def start(message):
    bot.send_message(message.chat.id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞–º–∏!")
    main_menu(message.chat.id)


def main_menu(chat_id):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(
        types.KeyboardButton("üà∫–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—Éüà∫"),
        types.KeyboardButton("üìú–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–¥–∞—á–∏üìú"),
        types.KeyboardButton("‚úîÔ∏è–ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–¥–∞—á—É‚úîÔ∏è"),
        types.KeyboardButton("–ù–∞–∑–Ω–∞—á–∏—Ç—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è"),
        types.KeyboardButton("–£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É"),
        types.KeyboardButton("–û—á–∏—Å—Ç–∏—Ç—å –∑–∞–¥–∞—á–∏"),
        types.KeyboardButton("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä–∞"),
        types.KeyboardButton("–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è"),
        types.KeyboardButton("üìã–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–πüìã"),
        types.KeyboardButton("–ü–í–ó"),
    )
    bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)


@bot.message_handler(func=lambda message: message.text == "–û—á–∏—Å—Ç–∏—Ç—å –∑–∞–¥–∞—á–∏")
def delete_all_tasks(message):
    global tasks  # –û–±—ä—è–≤–ª—è–µ–º, —á—Ç–æ –º—ã –±—É–¥–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
    tasks.clear()  # –û—á–∏—â–∞–µ–º —Å–ª–æ–≤–∞—Ä—å —Å –∑–∞–¥–∞—á–∞–º–∏
    bot.send_message(message.chat.id, "–í—Å–µ –∑–∞–¥–∞—á–∏ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã.")
    main_menu(message.chat.id)


# –ü—Ä–æ—Å–º–æ—Ç—Ä –¥–∞—à–±–æ—Ä–¥–∞
@bot.message_handler(func=lambda message: message.text == "–ü–í–ó")
def message_pvz(message):
    if message.chat.id != manager_chat_id:
        bot.send_message(message.chat.id, "–¢–æ–ª—å–∫–æ –º–µ–Ω–µ–¥–∂–µ—Ä –º–æ–∂–µ—Ç –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –ü–í–ó.")
        main_menu(message.chat.id)
        return
    else:
        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞ –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        bot.send_message(message.chat.id, "–ü—Ä–æ—Ü–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á:")

        image_paths = [
            '–∑–∞–¥–∞—á–∞ –ê.PNG',
            '–∑–∞–¥–∞—á–∞ –ë.PNG',
            '–∑–∞–¥–∞—á–∞ –í.PNG'
        ]

        for image_path in image_paths:
            with open(image_path, 'rb') as photo:
                bot.send_photo(message.chat.id, photo)

        markup = types.InlineKeyboardMarkup()
        pvz = types.InlineKeyboardButton('–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–∞—à–±–æ—Ä–¥', url=DASHBOARD_URL)
        markup.row(pvz)
        bot.send_message(message.chat.id, '–¢—ã–∫–∞–πüëá', parse_mode='html', reply_markup=markup)

@bot.message_handler(func=lambda message: message.text == "–£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É")
def delete_task(message):
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ ID –∑–∞–¥–∞—á–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:")
    bot.register_next_step_handler(message, process_delete_task)


def process_delete_task(message):
    try:
        task_id = int(message.text)
        if task_id in tasks:
            del tasks[task_id]
            bot.send_message(message.chat.id, f"–ó–∞–¥–∞—á–∞ ID: {task_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞.")
        else:
            bot.send_message(message.chat.id, "–ó–∞–¥–∞—á–∞ —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
    except ValueError:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –∑–∞–¥–∞—á–∏.")

    main_menu(message.chat.id)


@bot.message_handler(func=lambda message: message.text == "üà∫–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—Éüà∫")
def add_task(message):
    if message.chat.id != manager_chat_id:
        bot.send_message(message.chat.id, "–¢–æ–ª—å–∫–æ –º–µ–Ω–µ–¥–∂–µ—Ä –º–æ–∂–µ—Ç –¥–æ–±–∞–≤–∞–ª—è—Ç—å –∑–∞–¥–∞—á–∏.")
        main_menu(message.chat.id)
        return
    else:
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏:")
        bot.register_next_step_handler(message, process_add_task)


def process_add_task(message):
    global task_id_counter
    task_text = message.text
    tasks[task_id_counter] = {'text': task_text, 'status': '–Ω–∞–∑–Ω–∞—á–µ–Ω–∞', 'assignee': None}
    bot.send_message(message.chat.id, f"–ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞: {task_text} (ID: {task_id_counter})")
    task_id_counter += 1
    main_menu(message.chat.id)


@bot.message_handler(func=lambda message: message.text == "üìú–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–¥–∞—á–∏üìú")
def view_tasks(message):
    if tasks:
        task_list = "\n".join(
            f"ID: {task_id}, –ó–∞–¥–∞—á–∞: {task['text']}, –°—Ç–∞—Ç—É—Å: {task['status']}, –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: {task['assignee'] if task['assignee'] else '–Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω'}"
            for task_id, task in tasks.items())
        bot.send_message(message.chat.id, f"–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á:\n{task_list}")
    else:
        bot.send_message(message.chat.id, "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á.")
    main_menu(message.chat.id)


@bot.message_handler(func=lambda message: message.text == "‚úîÔ∏è–ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–¥–∞—á—É‚úîÔ∏è")
def complete_task(message):
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ ID –∑–∞–¥–∞—á–∏ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è:")
    bot.register_next_step_handler(message, process_complete_task)


@bot.message_handler(func=lambda message: message.text == "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä–∞")
def set_manager(message):
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ ID –º–µ–Ω–µ–¥–∂–µ—Ä–∞:")
    bot.register_next_step_handler(message, process_set_manager)


def process_set_manager(message):
    global manager_chat_id
    try:
        manager_chat_id = int(message.text)
        bot.send_message(message.chat.id, f"–ú–µ–Ω–µ–¥–∂–µ—Ä —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Å ID: {manager_chat_id}.")
    except ValueError:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –º–µ–Ω–µ–¥–∂–µ—Ä–∞.")

    main_menu(message.chat.id)


def process_complete_task(message):
    try:
        task_id = int(message.text)
        if task_id in tasks:
            tasks[task_id]['status'] = '–≤—ã–ø–æ–ª–Ω–µ–Ω–æ'
            assignee = tasks[task_id]['assignee'] if tasks[task_id]['assignee'] else "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å"
            report = f"–ó–∞–¥–∞—á–∞ ID: {task_id} –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–º {assignee}.\n–û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏: {tasks[task_id]['text']}"

            # –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á–µ—Ç–∞ –º–µ–Ω–µ–¥–∂–µ—Ä—É, –µ—Å–ª–∏ –µ–≥–æ ID —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
            if manager_chat_id:
                bot.send_message(manager_chat_id, report)

            bot.send_message(message.chat.id, f"–ó–∞–¥–∞—á–∞ ID: {task_id} –ø–æ–º–µ—á–µ–Ω–∞ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è.")
        else:
            bot.send_message(message.chat.id, "–ó–∞–¥–∞—á–∞ —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
    except ValueError:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –∑–∞–¥–∞—á–∏.")

    main_menu(message.chat.id)


@bot.message_handler(func=lambda message: message.text == "–ù–∞–∑–Ω–∞—á–∏—Ç—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è")
def assign_task(message):
    if message.chat.id != manager_chat_id:
        bot.send_message(message.chat.id, "–¢–æ–ª—å–∫–æ –º–µ–Ω–µ–¥–∂–µ—Ä –º–æ–∂–µ—Ç –Ω–∞–∑–Ω–∞—á–∞—Ç—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π –Ω–∞ –∑–∞–¥–∞—á–∏.")
        main_menu(message.chat.id)
        return

    if not tasks:
        bot.send_message(message.chat.id, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–¥–∞—á –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π.")
        main_menu(message.chat.id)
        return

    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ ID –∑–∞–¥–∞—á–∏ –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è:")
    bot.register_next_step_handler(message, process_assign_task)


def process_assign_task(message):
    try:
        task_id = int(message.text)
        if task_id in tasks:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π
            executor_list = "\n".join(f"ID: {executor_id} - {username}" for executor_id, username in executors.items())
            if executor_list:
                bot.send_message(message.chat.id, f"–í—ã–±–µ—Ä–∏—Ç–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è:\n{executor_list}\n–í–≤–µ–¥–∏—Ç–µ ID –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è:")
                bot.register_next_step_handler(message, lambda m: assign_executor(m, task_id))
            else:
                bot.send_message(message.chat.id, "–ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π.")
                main_menu(message.chat.id)
        else:
            bot.send_message(message.chat.id, "–ó–∞–¥–∞—á–∞ —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
    except ValueError:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –∑–∞–¥–∞—á–∏.")


def assign_executor(message, task_id):
    executor_id = message.text.strip()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –≤ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö
    if executor_id in executors:
        tasks[task_id]['assignee'] = executor_id
        bot.send_message(message.chat.id, f"–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å —Å ID {executor_id} –Ω–∞–∑–Ω–∞—á–µ–Ω –Ω–∞ –∑–∞–¥–∞—á—É ID {task_id}.")
    else:
        bot.send_message(message.chat.id, "–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞.")

    main_menu(message.chat.id)


@bot.message_handler(func=lambda message: message.text == "–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è")
def register_executor(message):
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à Telegram ID –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:")
    bot.register_next_step_handler(message, process_register_executor)


def process_register_executor(message):
    executor_id = message.text.strip()

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
    if executor_id not in executors.values():
        executors[message.from_user.username] = executor_id
        bot.send_message(message.chat.id, f"–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å —Å ID {executor_id} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.")
    else:
        bot.send_message(message.chat.id, "–≠—Ç–æ—Ç –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.")

    main_menu(message.chat.id)


@bot.message_handler(func=lambda message: message.text == "üìã–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–πüìã")
def view_executors(message):
    if executors:
        executor_list = "\n".join(
            f"–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {username}, ID: {executor_id}" for username, executor_id in executors.items())
        bot.send_message(message.chat.id, f"–°–ø–∏—Å–æ–∫ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π:\n{executor_list}")
    else:
        bot.send_message(message.chat.id, "–ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π.")

    main_menu(message.chat.id)


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.polling(none_stop=True)
